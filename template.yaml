AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Backend API for Managing Game Knight events

Parameters:
  Mode:
    Type: String
    Description: Mode of deployment
    AllowedValues:
      - prod
      - dev

  Stage:
    Type: String
    Default: Staging
    Description: API Stage

  CognitoUserPoolArn:
    Type: String
    Default: arn:aws:cognito-idp:us-east-1:569879156317:userpool/us-east-1_Okkk4SAZX
    Description: Cognito User Pool Arn

Mappings:
  EnvMap:
    prod:
      CloudFrontS3Bucket: cdkstack-bucket83908e77-7tr0zgs93uwh
      EventsTableName: game_events
      BggPictureSqsQueueName: bgg_picture_sqs_queue
      ApiGatewayName: Game Knights Events API
      OwnerTag: EventsAPI
    dev:
      CloudFrontS3Bucket: cdkstack-bucketdevff8a9acd-pine3ubqpres
      EventsTableName: game_events_dev
      BggPictureSqsQueueName: bgg_picture_sqs_queue_dev
      ApiGatewayName: Game Knights Events API DEV
      OwnerTag: DevEventsAPI

Resources:
  EventsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !FindInMap [EnvMap, !Ref Mode, ApiGatewayName]
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*" # allows for logging on any resource
          HttpMethod: "*" # allows for logging on any method
      # Cognito pool auth
      Auth:
        DefaultAuthorizer: CognitoPasswordless
        Authorizers:
          CognitoPasswordless:
            UserPoolArn: !Ref CognitoUserPoolArn
      Cors: "'*'"
      EndpointConfiguration:
        Type: EDGE
      Tags:
        Owner: !FindInMap [EnvMap, !Ref Mode, OwnerTag]
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: "swagger.yaml"
            # Location: s3://cp-sam-deploy-east1/swagger.yaml

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !FindInMap [EnvMap, !Ref Mode, EventsTableName]
      AttributeDefinitions:
        - AttributeName: "event_id"
          AttributeType: "S"
        - AttributeName: "event_type"
          AttributeType: "S"
        - AttributeName: "date"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "event_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: EventTypeByDate
          KeySchema:
            - AttributeName: "event_type"
              KeyType: "HASH"
            - AttributeName: "date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Name
          Value: !FindInMap [EnvMap, !Ref Mode, EventsTableName]
        - Key: Owner
          Value: EventsAPI

  ManageEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub manage_events_${Mode}
      CodeUri: manage_events/
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 512
      Timeout: 30
      Events:
        # /events
        GetEvents:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events
            Method: GET
            Auth:
              Authorizer: CognitoPasswordless
        EventsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events
            Method: OPTIONS
            Auth:
              Authorizer: NONE

        # /event
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event
            Method: GET
            Auth:
              Authorizer: CognitoPasswordless
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event
            Method: POST
            Auth:
              Authorizer: CognitoPasswordless
        DeleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event
            Method: DELETE
            Auth:
              Authorizer: CognitoPasswordless
        UpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event
            Method: PUT
            Auth:
              Authorizer: CognitoPasswordless
        EventOptions:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event
            Method: OPTIONS
            Auth:
              Authorizer: NONE

        # /players
        GetPlayers:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /players
            Method: GET
            Auth:
              Authorizer: CognitoPasswordless
        PlayersOptions:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /players
            Method: OPTIONS
            Auth:
              Authorizer: NONE

        # /event/rsvp
        GetEventRSVP:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event/rsvp
            Method: GET
            RequestParameters:
            Auth:
              Authorizer: CognitoPasswordless
        PostEventRSVP:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event/rsvp
            Method: POST
            RequestParameters:
            Auth:
              Authorizer: CognitoPasswordless
        DeleteEventRSVP:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event/rsvp
            Method: DELETE
            RequestParameters:
            Auth:
              Authorizer: CognitoPasswordless
        EventRsvpOptions:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /event/rsvp
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Tags:
        Owner: !FindInMap [EnvMap, !Ref Mode, OwnerTag]
      Environment:
        Variables:
          table_name: !FindInMap [EnvMap, !Ref Mode, EventsTableName]
          s3_bucket: !FindInMap [EnvMap, !Ref Mode, CloudFrontS3Bucket]
          sqs_url: !Ref BggPictureSqsQueue

      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BggPictureSqsQueue.QueueName
        - S3CrudPolicy:
            BucketName: !FindInMap [EnvMap, !Ref Mode, CloudFrontS3Bucket]
          # Allow cognito pool ListUsers
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:ListGroups

              Resource: !Ref CognitoUserPoolArn

  RetrieveBGGImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "RetrieveBGGImage_${Mode}"
      CodeUri: bgg_picture/
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 30
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BggPictureSqsQueue.Arn
            BatchSize: 10
      Policies:
        - S3ReadPolicy:
            BucketName: !FindInMap [EnvMap, !Ref Mode, CloudFrontS3Bucket]
        - S3WritePolicy:
            BucketName: !FindInMap [EnvMap, !Ref Mode, CloudFrontS3Bucket]
      Tags:
        Owner: !FindInMap [EnvMap, !Ref Mode, OwnerTag]

  BggPictureSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !FindInMap [EnvMap, !Ref Mode, BggPictureSqsQueueName]
      Tags:
        - Key: Owner
          Value: !FindInMap [EnvMap, !Ref Mode, OwnerTag]

Outputs:
  EventsApiGateway:
    Description: "API Gateway endpoint URL for Staging stage for Game Knights Events function"
    Value: !Sub "https://${EventsApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  EventsApiGatewayRestApiId:
    Description: "API Gateway ARN for Game Knights Events AWS API Gateway"
    Value: !Ref EventsApiGateway
    Export:
      Name: !Sub "EventsApiGateway-RestApiId-${Mode}"
  EventsApiGatewayRootResourceId:
    Value: !GetAtt EventsApiGateway.RootResourceId
    Export:
      Name: !Sub "EventsApiGateway-RootResourceId-${Mode}"

  SQSUrl:
    Value: !Ref BggPictureSqsQueue
